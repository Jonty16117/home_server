---
- name: Find backup files
  ansible.builtin.find:
    paths: "{{ role_path }}/files"
    patterns: "wireguard_backup_*.zip"
    recurse: false
  register: backup_files
  delegate_to: localhost

- name: Fail if no backup file found
  ansible.builtin.fail:
    msg: "No WireGuard backup file found in {{ role_path }}/files"
  when: backup_files.matched == 0
  delegate_to: localhost

- name: Set latest backup file based on epoch in filename
  ansible.builtin.set_fact:
    backup_file: >-
      {{
        backup_files.files
        | map(attribute='path')
        | max(attribute='regex_search("wireguard_backup_(\\d+)\\.zip") | int')
      }}
  delegate_to: localhost
  when: backup_files.matched > 0

- name: Show selected latest backup file
  ansible.builtin.debug:
    msg: "Latest backup file: {{ backup_file }}"

- name: Remove existing WireGuard and WGDashboard directories if they exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/wireguard
    - /opt/WGDashboard

- name: Copy backup archive to remote host
  ansible.builtin.copy:
    src: "{{ backup_file }}"
    dest: "/tmp/wireguard_backup.zip"
    mode: '0600'

- name: Extract backup archive
  ansible.builtin.unarchive:
    src: "/tmp/wireguard_backup.zip"
    dest: /
    remote_src: yes
    extra_opts:
      - "-P"
      - "{{ wireguard_backup_password }}"

- name: Remove temporary backup archive from remote
  ansible.builtin.file:
    path: "/tmp/wireguard_backup.zip"
    state: absent

- name: Show restored directories
  ansible.builtin.shell: "ls -l /etc/wireguard /opt/WGDashboard"
  register: restore_list

- name: Display restored files
  debug:
    var: restore_list.stdout_lines
